# The directory to read server logs from
# ! THIS MUST BE SET !
# If you have multiple directories that you would like to pull from, enter them separated by a ;
# Default: not set
serverLogsDir=

# The directory to read historical logs from
# If you run the processor in historical mode, this must be set
# If you have multiple directories that you would like to pull from, enter them separated by a ;
# Default: not set
historicalLogsDir=

# The regex pattern used to denote what a log file looks like
# This should have at most one capture group, where it captures a set of digits to denote the server's ID
# If no ID can be derived from the name or no capture group is specified, then it will use the default value of 99
# e.g. DedicatedServer1.log => 1,  DedicatedServer.log => 99
# Default: DedicatedServer([\d]{0,2})\.log
serverLogPattern=DedicatedServer([\d]{0,2})\.log

# The regex pattern used to denote what an old log file looks like, to be parsed for loading historical data
# This should have at most one capture group, where it captures a set of digits to denote the server's ID
# If no ID can be derived from the name or no capture group is specified, then it will use the default value of 99
# e.g. DedicatedServer1.log372117618.log => 1,  DedicatedServer.log72861612.log => 99
# Default: DedicatedServer([\d]{0,2})\.log\d+\.log
historicalLogPattern=DedicatedServer([\d]{0,2})\.log\d+\.log

# If set to true, will delete any empty profile folders created by servers when they start. 
# If a server's profile folder is not empty, this will not delete it (unexpected currently)
# Default: false
cleanServerProfiles=false

# The display name to use for referencing data sent to the service (if enabled)
# ! If anything that uses the service is enabled, THIS MUST BE SET !
# Note that this may be displayed on the website if you choose to share server data, so keep it friendly
# Default: not set
displayName=

# The region the server is hosted in, for use when referencing data sent to the service (if enabled)
# Valid values: ASIA, EUROPE, NORTH_AMERICA, OCEANIA, RUSSIA, SOUTH_AMERICA
# If not set, will be considered UNKNOWN
# Default: not set
region=

# Specifies if parsed data should be persisted to the local database
# Note that regardless of this being true or false, certain data (e.g. connection keys, server states, date references) will be stored in the DB
# Default: false
persist=false

# The host name / IP of the data service (if enabled)
# Default: uasclan.net
serviceHost=uasclan.net

# The port of the data service (if enabled)
# Default: 8485
servicePort=8485

# The timeout (in seconds) for any service connections
# Default: 10
# Min: 1
# Max: 60
serviceTimeout=10

# If enabled, will send server data (i.e. player / weapon stats, server status) to the service
# Default: false
enableDataSharing=false

# >> NOT IMPLEMENTED YET <<
# If enabled, will send you alerts about any server issues that may be going on (e.g. NRS issues, jammed servers, etc)
# Default: false
enableAlerts=false

# The directory to store item cache JSON files in
# If not specified, will use <current directory>/cache
# Default: not set
cacheDir=

# The JSON config for custom items that the parser should recognize.
# This is not required, but prevents it from doing a double-parse on items it might not know (e.g. DamageTrigger)
# If not specified, will use <current directory>/cfg/customItems.json
# Default: not set
customItemsConfig=



# Interval time in seconds that logs will be parsed
# Default: 30
# Min: 10
pollInterval=30

# Number of times the server has to be polled without any new data to assume it is jammed
# e.g. if the jamThreshold is 5 and a server's log is read 5 times without any new data being read,
# it will assume it is jammed.
# Note that this should be something sensible in relation to the pollInterval. It's possible for the server
# to legitimately not print any new data for several minutes if nothing is happening, so this shouldn't be too low
# to avoid any false detections
# A value <= 0 will disable jam alerts
# Default: 5
jamThreshold=5

# Number of times parsing will occur before refreshing and checking for any new log files
# e.g. if set to 4, then every 4 runs this will check the server logs directory for any log files it didn't know about yet.
# Default: 4
logCheckInterval=4



# If set to true, then a JSON file containing current server data will be printed during parsing
# The file it prints to is defined via the serverDataFile line
# Default: false
printServerData=false

# If printServerData is true, this is the file data will be printed to
# If no value is specified, will print to <current directory>/data/ServerData.json
# Default: not set
serverDataFile=



# If true, will allow for players to be banned for using items outlined in the banned items config file
# When a player is banned, they will be kicked from the server and any subsequent rejoins will be met with an automatic kick as well,
# up until banTime seconds are up
# Default: false
enableBanning=false

# If true and enableBanning is true, then this will share any bans with the service to allow other servers to use this ban as well (e.g. you ban someone, server B will ban them as well for their specified amount of time)
# Additionally, other servers bans will be used on your machine (e.g. server B bans someone, your server will ban them as well for your specified amount of time)
# Default: false
enableBanSharing=false

# If true, and enableBanSharing (and all of its prerequisites) is true, then this will ensure any other server's bans will only be applied to you if it's for an exact loadout that you also have banned
# e.g. if another server bans the Rubico but you do not, then their Rubico bans will not be applied to you
# Recommended to keep this on
# Default: true
enforceSharedBanLoadouts=true

# JSON config file that specifies banned items / loadouts
# If no value is specified, will look for <current directory>/cfg/bannedItems.json
# Default: not set
bannedItemsConfig=

# Time in seconds that players with offensive loadouts will be banned and repeatedly kicked for (+ up to banCheckInterval additional seconds)
# If you would prefer to have it be just a kick instead of a ban, it's recommended to make this a much shorter value (e.g. 10)
# so that once a player is kicked, they'll be able to rejoin with no consequences sooner
# Default: 300 (5 min)
banTime=300

# Time in seconds that any bans applied to people who are already banned will last for (+ up to banCheckInterval additional seconds)
# e.g. if Player A was banned and rejoins before the ban expires, this is the time that the ban we create to kick them will last for
# There's little to no point in making this any longer than 15 or so seconds, since the point of this is just to kick them while their ban is in effect
# In addition, if they're rejoining, they're most likely using a proxy (DE's or otherwise)
# For anything we determine is one of DE's proxies, it will specifically ban the IP on the player's current port as to not affect 
# any legit players who may be using that same proxy
# Default: 30
secondaryBanTime=30

# Interval time in seconds that bans will be checked for expiration
# Default: 15
# Min: 1
banCheckInterval=15

# Interval time in seconds that new bans will be fetched from the service if enableBanSharing is true
# Default: 60
# Min: 15
banFetchInterval=60
